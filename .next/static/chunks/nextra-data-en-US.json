{"/":{"title":"Introduction","data":{"":"Welcome to Opexa Portal SDK documentation!","what-is-opexa-portal-sdk#What is Opexa Portal SDK?":"The Opexa Portal SDK is a powerful and flexible library designed to simplify integration with the Opexa. It provides developers with a comprehensive set of tools and functions to seamlessly integrate Opexa's gaming platform features into their applications.","get-started#Get Started":"To get started, navigate to the Installation page."}},"/instance/create-account":{"title":"Create Account","data":{"":"The Opexa Portal SDK provides createAccount() method to register new users on the platform. This guide offers a detailed explanation of how to use this method to implement user registration functionality in your application.","using-the-createaccount-method#Using the createAccount() Method":"The createAccount() method is designed to handle the registration of new users with various required and optional parameters. Here's how you can use it:\nsdk.createAccount(input);","method-signature#Method Signature":"createAccount(input: CreateAccountInput): Promise<CreateAccountReturn>","input-types#Input Types":"The CreateAccountInput type defines the structure of the account creation parameters:\ninterface CreateAccountInput {\r\n  id?: string;\r\n  name: string;\r\n  password: string;\r\n  mobileNumber: string;\r\n  dateOfBirth: string;\r\n  btag?: string;\r\n  domain?: string;\r\n  referralCode?: string;\r\n  verificationCode?: string;\r\n  reCAPTCHAResponse?: string;\r\n}","return-types#Return Types":"The CreateAccountReturn type provides a structured format for the account creation result:\ntype CreateAccountReturn =\r\n  | {\r\n      ok: true;\r\n      error?: never;\r\n      data: {\r\n        id: string;\r\n      };\r\n    }\r\n  | {\r\n      ok: false;\r\n      data?: never;\r\n      error:\r\n        | HttpError\r\n        | {\r\n            name:\r\n              | \"AccountNameNotAvailableError\"\r\n              | \"InvalidPlatformError\"\r\n              | \"InvalidReCAPTCHAResponseError\"\r\n              | \"InvalidSMSVerificationCodeError\"\r\n              | \"MinimumAgeRequirementError\"\r\n              | \"MobileNumberNotAvailableError\";\r\n            message: string;\r\n          };\r\n    };","usage-examples#Usage Examples":"Here's a detailed example of how to use the createAccount() method in a React component:\nimport React, { useState } from \"react\";\r\nimport { sdk } from \"$lib/sdk\";\r\n\r\nfunction CreateAccountForm() {\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    password: \"\",\r\n    mobileNumber: \"\",\r\n    dateOfBirth: \"\",\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await sdk.createAccount(formData);\r\n      if (result.ok) {\r\n        setSuccess(true);\r\n        console.log(\"Account created with ID:\", result.data.id);\r\n      } else {\r\n        setError(result.error.message);\r\n      }\r\n    } catch (err) {\r\n      setError(\"An unexpected error occurred\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  if (success) return <div>Account created successfully!</div>;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={formData.name}\r\n        onChange={handleChange}\r\n        placeholder=\"Username\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        value={formData.password}\r\n        onChange={handleChange}\r\n        placeholder=\"Password\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"tel\"\r\n        name=\"mobileNumber\"\r\n        value={formData.mobileNumber}\r\n        onChange={handleChange}\r\n        placeholder=\"Mobile Number\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"date\"\r\n        name=\"dateOfBirth\"\r\n        value={formData.dateOfBirth}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n      <button type=\"submit\" disabled={isLoading}>\r\n        {isLoading ? \"Creating Account...\" : \"Create Account\"}\r\n      </button>\r\n      {error && <p className=\"error\">{error}</p>}\r\n    </form>\r\n  );\r\n}"}},"/instance/sign-out":{"title":"Sign Out","data":{"":"The Opexa Portal SDK provides a straightforward signOut method to end user sessions securely. This guide offers a detailed explanation of how to implement user sign-out functionality in your application using this method.","using-the-signout-method#Using the signOut Method":"The signOut method is designed to be simple yet effective in terminating user sessions. Here's how you can use it:\nsdk.signOut();","method-signature#Method Signature":"signOut(): Promise<void>","usage-examples#Usage Examples":"Here's a detailed example of implementing a sign-out button using React\nimport React, { useState } from \"react\";\r\nimport { sdk } from \"$lib/sdk\";\r\n\r\nfunction SignOutButton() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSignOut = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      await sdk.signOut();\r\n      // Sign-out successful, update UI or redirect\r\n      console.log(\"Sign-out successful\");\r\n      // You might want to redirect to the home page or login page here\r\n    } catch (err) {\r\n      setError(\"An error occurred during sign-out\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleSignOut} disabled={isLoading}>\r\n        {isLoading ? \"Signing Out...\" : \"Sign Out\"}\r\n      </button>\r\n      {error && <p>{error}</p>}\r\n    </div>\r\n  );\r\n}"}},"/instance/platform":{"title":"Platform","data":{"":"The Opexa Portal SDK provides platform() method to retrieve current platform details. This guide offers a detailed explanation of how to use this method to access and utilize platform-specific information in your application.","using-the-platform-method#Using the platform() Method":"The platform() method is designed to fetch comprehensive details about the current platform. Here's how you can use it:\nsdk.platform();","method-signature#Method Signature":"platform(): Promise<PlatformReturn>","return-types#Return Types":"The PlatformReturn type provides a structured format for platform information:\ntype PlatformReturn =\r\n  | {\r\n      ok: true;\r\n      data: Platform;\r\n    }\r\n  | {\r\n      ok: false;\r\n      error: HttpError;\r\n    };\r\n\r\ninterface Platform {\r\n  paymentSettings: {\r\n    minimumFirstDepositAmount?: number;\r\n    restrictWithdrawalsToVerifiedMembers: boolean;\r\n    depositGateway: {\r\n      bank: GatewaySettings;\r\n      gcash: GatewaySettings;\r\n      maya: GatewaySettings;\r\n      mayaApp: GatewaySettings;\r\n    };\r\n    withdrawalGateway: {\r\n      bank: GatewaySettings;\r\n      gcash: GatewaySettings;\r\n      maya: GatewaySettings;\r\n      mayaApp: GatewaySettings;\r\n    };\r\n  };\r\n  pointsClubSettings: {\r\n    multiplier: number;\r\n  };\r\n}","usage-examples#Usage Examples":"import React, { useState, useEffect } from \"react\";\r\nimport { sdk } from \"$lib/sdk\";\r\n\r\nfunction PlatformInfo() {\r\n  const [platformData, setPlatformData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchPlatformData = async () => {\r\n      try {\r\n        const result = await sdk.platform();\r\n        if (result.ok) {\r\n          setPlatformData(result.data);\r\n        } else {\r\n          setError(result.error.message);\r\n        }\r\n      } catch (err) {\r\n        setError(\"An unexpected error occurred\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPlatformData();\r\n  }, []);\r\n\r\n  if (isLoading) return <div>Loading platform information...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Platform Information</h2>\r\n      <h3>Payment Settings</h3>\r\n      <p>\r\n        Minimum First Deposit:\r\n        {platformData.paymentSettings.minimumFirstDepositAmount || \"Not set\"}\r\n      </p>\r\n      <p>\r\n        Restrict Withdrawals to Verified Members:\r\n        {platformData.paymentSettings.restrictWithdrawalsToVerifiedMembers\r\n          ? \"Yes\"\r\n          : \"No\"}\r\n      </p>\r\n\r\n      <h3>Points Club Settings</h3>\r\n      <p>Multiplier: {platformData.pointsClubSettings.multiplier}</p>\r\n\r\n      <h3>Deposit Gateways</h3>\r\n      <ul>\r\n        {Object.entries(platformData.paymentSettings.depositGateway).map(\r\n          ([key, value]) => (\r\n            <li key={key}>\r\n              {key}: {value.enabled ? \"Enabled\" : \"Disabled\"}\r\n            </li>\r\n          )\r\n        )}\r\n      </ul>\r\n\r\n      <h3>Withdrawal Gateways</h3>\r\n      <ul>\r\n        {Object.entries(platformData.paymentSettings.withdrawalGateway).map(\r\n          ([key, value]) => (\r\n            <li key={key}>\r\n              {key}: {value.enabled ? \"Enabled\" : \"Disabled\"}\r\n            </li>\r\n          )\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}"}},"/instance/account":{"title":"Account","data":{"":"The Opexa Portal SDK provides account() method to retrieve current user's details. This guide offers a detailed explanation of how to use this method to access and utilize user-specific information in your application.","using-the-account-method#Using the account() Method":"The account() method is designed to fetch details about the current authenticated user. Here's how you can use it:\nsdk.account();","method-signature#Method Signature":"account(): Promise<AccountReturn>","return-types#Return Types":"The AccountReturn type provides a structured format for user account information:\ntype AccountReturn =\r\n  | {\r\n      ok: true;\r\n      data: Account;\r\n    }\r\n  | {\r\n      ok: false;\r\n      error: HttpError;\r\n    };\r\n\r\ninterface Account {\r\n  id: string;\r\n  name: string;\r\n  status: MemberAccountStatus;\r\n  realName?: string;\r\n  nickName?: string;\r\n  dateOfBirth?: Date;\r\n  validId?: string;\r\n  emailAddress?: string;\r\n  mobileNumber?: string;\r\n  verified: boolean;\r\n  verificationStatus: MemberAccountVerificationStatus;\r\n  mobileNumberVerified: boolean;\r\n  mobileNumberVerificationRequired: boolean;\r\n  transactionPassword: boolean;\r\n  dateTimeLastActive?: Date;\r\n  dateTimeCreated: Date;\r\n  dateTimeLastUpdated: Date;\r\n}","usage-examples#Usage Examples":"Here's an example of how to use the account() method in a React component:\nimport React, { useState, useEffect } from \"react\";\r\nimport { sdk } from \"$lib/sdk\";\r\n\r\nfunction AccountInfo() {\r\n  const [accountData, setAccountData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchAccountData = async () => {\r\n      try {\r\n        const result = await sdk.account();\r\n        if (result.ok) {\r\n          setAccountData(result.data);\r\n        } else {\r\n          setError(result.error.message);\r\n        }\r\n      } catch (err) {\r\n        setError(\"An unexpected error occurred\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAccountData();\r\n  }, []);\r\n\r\n  if (isLoading) return <div>Loading account information...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n  if (!accountData) return <div>No account data available</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Account Information</h2>\r\n      <p>Name: {accountData.name}</p>\r\n      <p>Status: {accountData.status}</p>\r\n      <p>Email: {accountData.emailAddress || \"Not provided\"}</p>\r\n      <p>Mobile: {accountData.mobileNumber || \"Not provided\"}</p>\r\n      <p>Verified: {accountData.verified ? \"Yes\" : \"No\"}</p>\r\n      <p>Verification Status: {accountData.verificationStatus}</p>\r\n      <p>Mobile Verified: {accountData.mobileNumberVerified ? \"Yes\" : \"No\"}</p>\r\n      <p>\r\n        Mobile Verification Required:\r\n        {accountData.mobileNumberVerificationRequired ? \"Yes\" : \"No\"}\r\n      </p>\r\n      <p>\r\n        Transaction Password Set:\r\n        {accountData.transactionPassword ? \"Yes\" : \"No\"}\r\n      </p>\r\n      <p>\r\n        Account Created:\r\n        {new Date(accountData.dateTimeCreated).toLocaleString()}\r\n      </p>\r\n      <p>\r\n        Last Updated:\r\n        {new Date(accountData.dateTimeLastUpdated).toLocaleString()}\r\n      </p>\r\n    </div>\r\n  );\r\n}"}},"/instance/sign-in":{"title":"Sign In","data":{"":"The Opexa Portal SDK provides a signIn method to authenticate users. This guide explains how to use this method to implement user sign-in functionality in your application.","using-the-signin-method#Using the signIn Method":"The signIn method accepts different input types based on the authentication method you want to use. Here are the available options:","sign-in-with-name-and-password#Sign In with Name and Password":"sdk.signIn({\r\n  type: \"NAME_AND_PASSWORD\",\r\n  name: \"username\",\r\n  password: \"userpassword\",\r\n});","sign-in-with-mobile-number#Sign In with Mobile Number":"sdk.signIn({\r\n  type: \"MOBILE_NUMBER\",\r\n  mobileNumber: \"1234567890\",\r\n  verificationCode: \"123456\",\r\n});","method-signature#Method Signature":"signIn(input: SignInInput): Promise<SignInReturn>","input-types#Input Types":"The SignInInput type is a union of two possible input structures:\ntype SignInInput =\r\n  | {\r\n      type: \"NAME_AND_PASSWORD\";\r\n      name: string;\r\n      password: string;\r\n    }\r\n  | {\r\n      type: \"MOBILE_NUMBER\";\r\n      mobileNumber: string;\r\n      verificationCode: string;\r\n    };","return-types#Return Types":"The SignInReturn type provides clear success/failure information:\ntype SignInReturn =\r\n  | {\r\n      ok: true;\r\n    }\r\n  | {\r\n      ok: false;\r\n      error:\r\n        | HttpError\r\n        | {\r\n            name: \"AccountNotFound\";\r\n            message: string;\r\n          };\r\n    };","usage-examples#Usage Examples":"Here's a detailed example of implementing a sign-in form using React\nimport React, { useState } from \"react\";\r\nimport { sdk } from \"$lib/sdk\";\r\n\r\nfunction SignInForm() {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await sdk.signIn({\r\n        type: \"NAME_AND_PASSWORD\",\r\n        name: username,\r\n        password: password,\r\n      });\r\n\r\n      if (result.ok) {\r\n        // Sign-in successful, redirect or update UI\r\n        console.log(\"Sign-in successful\");\r\n      } else {\r\n        // Handle sign-in error\r\n        setError(result.error.message);\r\n      }\r\n    } catch (err) {\r\n      setError(\"An unexpected error occurred\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={username}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n        placeholder=\"Username\"\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"Password\"\r\n      />\r\n      <button type=\"submit\">Sign In</button>\r\n      {error && <p>{error}</p>}\r\n    </form>\r\n  );\r\n}"}},"/installation":{"title":"Getting Started","data":{"":"To use the Opexa Portal SDK in your project, you need to configure it properly. This guide will walk you through the setup process.First, install the SDK using npm:\nnpm install @opexa/portal-sdk","creating-an-sdk-instance#Creating an SDK Instance":"To use the SDK, you need to create an instance with the appropriate configuration. Here's how you can do it:\nimport Sdk from \"@opexa/portal-sdk\";\r\n\r\nexport const sdk = new Sdk({\r\n  platform: \"Z892\",\r\n  environment: \"development\", // or \"production\",\r\n});","usage-example#Usage Example":"import { sdk } from \"$lib/sdk\";\r\nimport * as React from \"react\";\r\n\r\nfunction Page() {\r\n  const [account, setAccount] = React.useState();\r\n\r\n  React.useEffect(function () {\r\n    sdk.account().then(setAccount);\r\n  }, []);\r\n\r\n  return (\r\n    <pre>\r\n      <code>{JSON.stringify(account, null, 2)}</code>\r\n    </pre>\r\n  );\r\n}"}}}