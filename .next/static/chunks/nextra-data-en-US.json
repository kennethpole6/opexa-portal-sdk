{"/":{"title":"Introduction","data":{"":"Welcome to Opexa Portal SDK documentation!","what-is-opexa-portal-sdk#What is Opexa Portal SDK?":"The Opexa Portal SDK is a powerful and flexible library designed to simplify integration with the Opexa. It provides developers with a comprehensive set of tools and functions to seamlessly integrate Opexa's gaming platform features into their applications.","get-started#Get Started":"To get started, navigate to the Installation page."}},"/installation":{"title":"Getting Started","data":{"":"To use the Opexa Portal SDK in your project, you need to configure it properly. This guide will walk you through the setup process.First, install the SDK using npm:\nnpm install @opexa/portal-sdk","creating-an-sdk-instance#Creating an SDK Instance":"To use the SDK, you need to create an instance with the appropriate configuration. Here's how you can do it:\nimport Sdk from \"@opexa/portal-sdk\";\r\n\r\nexport const sdk = new Sdk({\r\n  platform: \"Z892\",\r\n  environment: \"development\", // or \"production\",\r\n});","usage-example#Usage Example":"import { sdk } from \"$lib/sdk\";\r\nimport * as React from \"react\";\r\n\r\nfunction Page() {\r\n  const [account, setAccount] = React.useState();\r\n\r\n  React.useEffect(function () {\r\n    sdk.account().then(setAccount);\r\n  }, []);\r\n\r\n  return (\r\n    <pre>\r\n      <code>{JSON.stringify(account, null, 2)}</code>\r\n    </pre>\r\n  );\r\n}"}},"/instance/sign-in":{"title":"Sign In","data":{"":"The Opexa Portal SDK provides a signIn method to authenticate users. This guide explains how to use this method to implement user sign-in functionality in your application.","using-the-signin-method#Using the signIn Method":"The signIn method accepts different input types based on the authentication method you want to use. Here are the available options:","sign-in-with-name-and-password#Sign In with Name and Password":"sdk.signIn({\r\n  type: \"NAME_AND_PASSWORD\",\r\n  name: \"username\",\r\n  password: \"userpassword\",\r\n});","sign-in-with-mobile-number#Sign In with Mobile Number":"sdk.signIn({\r\n  type: \"MOBILE_NUMBER\",\r\n  mobileNumber: \"1234567890\",\r\n  verificationCode: \"123456\",\r\n});","method-signature#Method Signature":"signIn(input: SignInInput): Promise<SignInReturn>","input-types#Input Types":"The SignInInput type is a union of two possible input structures:\ntype SignInInput =\r\n  | {\r\n      type: \"NAME_AND_PASSWORD\";\r\n      name: string;\r\n      password: string;\r\n    }\r\n  | {\r\n      type: \"MOBILE_NUMBER\";\r\n      mobileNumber: string;\r\n      verificationCode: string;\r\n    };","return-types#Return Types":"The SignInReturn type provides clear success/failure information:\ntype SignInReturn =\r\n  | {\r\n      ok: true;\r\n    }\r\n  | {\r\n      ok: false;\r\n      error:\r\n        | HttpError\r\n        | {\r\n            name: \"AccountNotFound\";\r\n            message: string;\r\n          };\r\n    };","usage-examples#Usage Examples":"Here's a detailed example of implementing a sign-in form using React\nimport React, { useState } from \"react\";\r\nimport { sdk } from \"$lib/sdk\";\r\n\r\nfunction SignInForm() {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await sdk.signIn({\r\n        type: \"NAME_AND_PASSWORD\",\r\n        name: username,\r\n        password: password,\r\n      });\r\n\r\n      if (result.ok) {\r\n        // Sign-in successful, redirect or update UI\r\n        console.log(\"Sign-in successful\");\r\n      } else {\r\n        // Handle sign-in error\r\n        setError(result.error.message);\r\n      }\r\n    } catch (err) {\r\n      setError(\"An unexpected error occurred\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={username}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n        placeholder=\"Username\"\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"Password\"\r\n      />\r\n      <button type=\"submit\">Sign In</button>\r\n      {error && <p>{error}</p>}\r\n    </form>\r\n  );\r\n}"}}}